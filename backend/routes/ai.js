const express = require('express');
const { body, validationResult } = require('express-validator');
const User = require('../models/User');
const Notification = require('../models/Notification');
const { protect } = require('../middleware/auth');
const { createSuccessResponse, createErrorResponse } = require('../utils/helpers');

const router = express.Router();

// @desc    Dummy health risk prediction (Low/Medium/High)
// @route   POST /api/ai/risk-simulate
// @access  Private
router.post(
  '/risk-simulate',
  protect,
  [
    body('userId').optional().isMongoId(),
    body('vitals').optional().isObject(),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json(createErrorResponse('Validation failed', errors.array()));
      }

      const targetUserId = req.body.userId || req.user._id;

      // Simple heuristic: compute a score from provided vitals
      const v = req.body.vitals || {};
      let score = 0;
      if (v.bpSys && v.bpDia) {
        if (v.bpSys > 160 || v.bpDia > 100) score += 3;
        else if (v.bpSys > 140 || v.bpDia > 90) score += 2;
        else if (v.bpSys > 130 || v.bpDia > 85) score += 1;
      }
      if (v.heartRate) {
        if (v.heartRate > 120 || v.heartRate < 50) score += 2;
        else if (v.heartRate > 100) score += 1;
      }
      if (v.bloodSugar) {
        if (v.bloodSugar > 240 || v.bloodSugar < 60) score += 3;
        else if (v.bloodSugar > 180) score += 2;
        else if (v.bloodSugar > 140) score += 1;
      }

      let risk = 'low';
      if (score >= 5) risk = 'high';
      else if (score >= 2) risk = 'medium';

      // If high risk: alert patient + family/caregivers
      let alertsCreated = 0;
      if (risk === 'high') {
        const patient = await User.findById(targetUserId);
        if (patient) {
          const notifications = [];
          notifications.push(
            new Notification({
              userId: patient._id,
              type: 'vitals_alert',
              title: 'High Health Risk Detected',
              message: 'Please seek medical attention. Generated by AI simulation.',
              priority: 'urgent',
              category: 'health',
              metadata: { source: 'automated' },
            })
          );
          if (Array.isArray(patient.familyConnections)) {
            patient.familyConnections.forEach((conn) => {
              notifications.push(
                new Notification({
                  userId: conn.userId,
                  type: 'family_alert',
                  title: `High Risk: ${patient.name}`,
                  message: 'AI simulation suggests patient is at high risk. Please check immediately.',
                  priority: 'urgent',
                  category: 'family',
                  metadata: { source: 'automated', patientId: patient._id },
                })
              );
            });
          }
          const result = await Notification.insertMany(notifications);
          alertsCreated = result.length;
        }
      }

      return res.json(
        createSuccessResponse('Risk simulated', {
          risk,
          score,
          alertsCreated,
        })
      );
    } catch (error) {
      console.error('Risk simulate error:', error);
      return res.status(500).json(createErrorResponse('Failed to simulate risk'));
    }
  }
);

module.exports = router;

